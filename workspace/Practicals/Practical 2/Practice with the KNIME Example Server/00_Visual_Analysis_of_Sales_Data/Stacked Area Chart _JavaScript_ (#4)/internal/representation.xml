<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="viewRepresentation">
<entry key="jsNamespace" type="xstring" value="knimeStreamgraph"/>
<config key="jsCode">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="/* global d3:false, kt:false, nv:false, moment:false */%%00010window.knimeStreamgraph = (function () {%%00010%%00010    var view = {};%%00010%%00010    var stackStyleByType = {%%00010        'Stacked-Area-Chart': 'stack',%%00010        'Percentage-Area-Chart': 'expand',%%00010        'Stream-Graph': 'stream-center'%%00010    };%%00010    var MIN_HEIGHT = 100;%%00010    var MIN_WIDTH = 100;%%00010    var currentFilter = null;%%00010    var TOOLTIP_WARNING = 'basisTooltip';%%00010%%00010    var _representation, _value, _data, _colorRange, layoutContainer,%%00010%%00010        chart, svg, knimeTable1, knimeTable2, xAxisType, xAxisData,%%00010%%00010        /**%%00010         * Function declarations%%00010         */%%00010        drawControls, setColors, setXAxisConf, transformData, drawChart, toggleFilter, setCssClasses,%%00010        createXAxisFormatter, updateTitles, updateAxisLabels, toggleGrid, toggleLegend, setTooltipCssClasses,%%00010        filterChanged;%%00010%%00010    view.init = function (representation, value) {%%00010        _representation = representation;%%00010        _value = value;%%00010        // Create Knime tables from data.%%00010        // Load data from port 1.%%00010        knimeTable1 = new kt();%%00010        knimeTable1.setDataTable(_representation.inObjects[0]);%%00010        // var columnKeys = _representation.options.columns;%%00010%%00010        // Load data from port 2.%%00010        knimeTable2 = null;%%00010        if (_representation.inObjects[1] !== null) {%%00010            knimeTable2 = new kt();%%00010            knimeTable2.setDataTable(_representation.inObjects[1]);%%00010        }%%00010%%00010        // Set locale for moment.js.%%00010        if (_representation.options.dateTimeFormats.globalDateTimeLocale !== 'en') {%%00010            moment.locale(_representation.options.dateTimeFormats.globalDateTimeLocale);%%00010        }%%00010%%00010        if (_representation.options.enableViewControls) {%%00010            drawControls();%%00010        }%%00010        setColors();%%00010        setXAxisConf();%%00010        transformData();%%00010        drawChart();%%00010        toggleFilter();%%00010    };%%00010%%00010    drawChart = function () {%%00010        // Remove earlier chart.%%00010        d3.select('#layoutContainer').remove();%%00010%%00010        /*%%00010         * Parse some options.%%00010         */%%00010        var stackStyle = stackStyleByType[_value.options.chartType];%%00010        var optFullscreen = _representation.options.svg.fullscreen &amp;&amp; _representation.runningInView;%%00010        var isTitle = _value.options.title !== '' || _value.options.subtitle !== '';%%00010%%00010        /*%%00010         * Create HTML for the view.%%00010         */%%00010        var body = d3.select('body');%%00010%%00010        // Determine available witdh and height.%%00010        var width, height;%%00010        if (optFullscreen) {%%00010            width = '100%';%%00010%%00010            if (isTitle || !_representation.options.enableViewControls) {%%00010                knimeService.floatingHeader(true);%%00010                height = '100%';%%00010            } else {%%00010                knimeService.floatingHeader(false);%%00010                height = 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010            }%%00010%%00010        } else {%%00010            width = _representation.options.svg.width + 'px';%%00010            height = _representation.options.svg.height + 'px';%%00010        }%%00010%%00010        layoutContainer = body.append('div').attr('id', 'layoutContainer').attr('class', 'knime-layout-container')%%00010            .style({%%00010                width: width,%%00010                height: height,%%00010                'min-width': MIN_WIDTH + 'px',%%00010                'min-height': MIN_HEIGHT + 'px',%%00010                position: 'absolute'%%00010            });%%00010%%00010        // create div container to hold svg%%00010        var svgContainer = layoutContainer.append('div').attr('id', 'svgContainer')%%00010            .attr('class', 'knime-svg-container').style({%%00010                'min-width': MIN_WIDTH + 'px',%%00010                'min-height': MIN_HEIGHT + 'px',%%00010                width: '100%',%%00010                height: '100%'%%00010            });%%00010%%00010        // Create the SVG object%%00010        svg = svgContainer.append('svg').attr('id', 'svg');%%00010%%00010        if (optFullscreen) {%%00010            svg.attr('width', '100%');%%00010            svg.attr('height', '100%');%%00010        } else {%%00010            svg.attr('width', width);%%00010            svg.attr('height', height);%%00010        }%%00010%%00010        if (_value.options.interpolation === 'basis' &amp;&amp; _value.options.interactiveGuideline) {%%00010            knimeService.setWarningMessage(%%00010                'Displaying a tooltip is not supported when interpolation is set to &quot;basis&quot;.', TOOLTIP_WARNING);%%00010        } else {%%00010            knimeService.clearWarningMessage(TOOLTIP_WARNING);%%00010        }%%00010%%00010        // create the stacked area chart%%00010        nv.addGraph(function () {%%00010            chart = nv.models.stackedAreaChart().margin({%%00010                right: 50%%00010            }).x(function (d) {%%00010                return d[0];%%00010            }).y(function (d) {%%00010                return d[1];%%00010            }).color(_colorRange).interpolate(_value.options.interpolation).style(stackStyle).showControls(false)%%00010                .showLegend(true).useInteractiveGuideline(%%00010                    _value.options.interpolation === 'basis' ? false : _value.options.interactiveGuideline)%%00010                .interactive(false).duration(0);%%00010%%00010            chart.dispatch.on('renderEnd.css', setCssClasses);%%00010%%00010            var topMargin = 10;%%00010            topMargin += _value.options.title ? 10 : 0;%%00010            topMargin += _value.options.legend ? 0 : 30;%%00010            topMargin += _value.options.subtitle ? 8 : 0;%%00010            var bottomMargin = _value.options.title || _value.options.subtitle ? 25 : 30;%%00010            chart.legend.margin({%%00010                top: topMargin,%%00010                bottom: topMargin%%00010            });%%00010            chart.margin({%%00010                top: topMargin,%%00010                bottom: bottomMargin%%00010            });%%00010%%00010            chart.xAxis.tickFormat(createXAxisFormatter());%%00010%%00010            chart.yAxis.tickFormat(d3.format(_representation.options.yAxisFormatString));%%00010%%00010            updateTitles(false);%%00010            updateAxisLabels(false);%%00010%%00010            svg.datum(_data).call(chart);%%00010%%00010            nv.utils.windowResize(chart.update);%%00010%%00010            if ('disabled' in _value.options) {%%00010                var state = chart.defaultState();%%00010                state.disabled = _value.options.disabled;%%00010                chart.dispatch.changeState(state);%%00010            }%%00010%%00010            toggleGrid();%%00010            toggleLegend();%%00010%%00010            // tooltip is re-created every time therefore we need to assign classes accordingly%%00010            chart.interactiveLayer.dispatch.on('elementMousemove.tooltipCss', setTooltipCssClasses);%%00010%%00010            return chart;%%00010        });%%00010    };%%00010%%00010    toggleGrid = function () {%%00010        var opacity = _value.options.showGrid ? 1 : 0;%%00010        d3.selectAll('g.tick:not(.zero) &gt; line').style('opacity', opacity);%%00010    };%%00010%%00010    toggleLegend = function () {%%00010        var opacity = _value.options.legend ? 1 : 0;%%00010        d3.select('g.nv-legend').style('opacity', opacity);%%00010    };%%00010%%00010    setXAxisConf = function () {%%00010        // Set data and data type for the x-axis.%%00010        var xAxisColumn = _representation.options.xAxisColumn;%%00010        if (typeof xAxisColumn === 'undefined') {%%00010            // If undefined: The user selected RowId as x-Axis.%%00010            xAxisType = 'string';%%00010            xAxisData = [];%%00010%%00010            var rows = knimeTable1.getRows();%%00010            for (var i = 0; i &lt; rows.length; i++) {%%00010                xAxisData.push(rows[i].rowKey);%%00010            }%%00010%%00010        } else {%%00010            var columnIndex = knimeTable1.getColumnNames().indexOf(xAxisColumn);%%00010            xAxisType = knimeTable1.getColumnTypes()[columnIndex];%%00010            if (xAxisType === 'dateTime') {%%00010                // need to get which exactly date&amp;time type it is%%00010                xAxisType = knimeTable1.getKnimeColumnTypes()[columnIndex];%%00010            }%%00010            xAxisData = knimeTable1.getColumn(columnIndex);%%00010        }%%00010    };%%00010%%00010    // Transform the tabular format into a JSON format.%%00010    transformData = function () {%%00010        // Check which rows are included by the filter.%%00010        var includedRows = [];%%00010        for (var j = 0; j &lt; knimeTable1.getNumRows(); j++) {%%00010            if (!currentFilter || knimeTable1.isRowIncludedInFilter(j, currentFilter)) {%%00010%%00010                includedRows.push(j);%%00010            }%%00010        }%%00010%%00010        _data = [];%%00010        var columns = _representation.options.columns;%%00010        // Loop over all columns.%%00010        for (var i = 0; i &lt; columns.length; i++) {%%00010            var columnKey = columns[i];%%00010            var columnIndex = knimeTable1.getColumnNames().indexOf(columnKey);%%00010            var currentColumn = knimeTable1.getColumn(columnIndex);%%00010%%00010            _data.push({%%00010                key: columnKey,%%00010                values: includedRows.map(%%00010                // This loops over all rows that are included.%%00010                function (i) {%%00010                    var d = currentColumn[i];%%00010%%00010                    if (xAxisType === 'number') {%%00010                        // If data type of x-axis column can be interpreted as numeric,%%00010                        // use the data for the x-axis.%%00010                        return [xAxisData[i], d];%%00010                    } else {%%00010                        // If not, just use an integer index [0, n[.%%00010                        return [i, d];%%00010                    }%%00010                })%%00010            });%%00010        }%%00010    };%%00010%%00010    toggleFilter = function () {%%00010        if (_value.options.subscribeFilter) {%%00010            knimeService.subscribeToFilter(_representation.tableIds[0], filterChanged, knimeTable1.getFilterIds());%%00010        } else {%%00010            knimeService.unsubscribeFilter(_representation.tableIds[0], filterChanged);%%00010        }%%00010    };%%00010%%00010    filterChanged = function (filter) {%%00010        currentFilter = filter;%%00010        transformData();%%00010        svg.datum(_data);%%00010        chart.update();%%00010    };%%00010%%00010    // Set color scale: custom or default.%%00010    setColors = function () {%%00010        var colorScale = [];%%00010        var columns = _representation.options.columns;%%00010        if (knimeTable2 === null) {%%00010            colorScale = d3.scale.category10();%%00010            if (columns.length &gt; 10) {%%00010                colorScale = d3.scale.category20();%%00010            }%%00010            _colorRange = colorScale.range();%%00010        } else {%%00010            var rowColors = knimeTable2.getRowColors();%%00010            var numColumns = columns.length;%%00010            for (var i = 0; i &lt; numColumns; i++) {%%00010                var columnName = columns[i];%%00010                var rowIndex = knimeTable2.getColumn(0).indexOf(columnName);%%00010                var color = rowColors[rowIndex];%%00010%%00010                if (!color) {%%00010                    color = '#7C7C7C';%%00010                }%%00010                colorScale.push(color);%%00010            }%%00010            _colorRange = colorScale;%%00010        }%%00010    };%%00010    %%00010    // Return a function to format the x-axis-ticks.%%00010    createXAxisFormatter = function () {%%00010        /* eslint indent: [2, 4, {&quot;SwitchCase&quot;: 1}]*/%%00010        switch (xAxisType) {%%00010            case 'Date and Time':%%00010                return function (i) {%%00010                    return moment(xAxisData[i]).utc().format(%%00010                        _representation.options.dateTimeFormats.globalDateTimeFormat);%%00010                };%%00010            case 'Local Date':%%00010                return function (i) {%%00010                    return moment(xAxisData[i]).format(_representation.options.dateTimeFormats.globalLocalDateFormat);%%00010                };%%00010            case 'Local Date Time':%%00010                return function (i) {%%00010                    return moment(xAxisData[i]).format(%%00010                        _representation.options.dateTimeFormats.globalLocalDateTimeFormat);%%00010                };%%00010            case 'Local Time':%%00010                return function (i) {%%00010                    return moment(xAxisData[i], 'hh:mm:ss.SSSSSSSSS').format(%%00010                        _representation.options.dateTimeFormats.globalLocalTimeFormat);%%00010                };%%00010            case 'Zoned Date Time':%%00010                return function (i) {%%00010                    var data = xAxisData[i];%%00010                    var regex = /(.*)\[(.*)\]$/;%%00010                    var match = regex.exec(data);%%00010                    var date, dateTimeOffset;%%00010                    %%00010                    if (match === null) {%%00010                        date = moment.tz(data, '');%%00010                    } else {%%00010                        dateTimeOffset = match[1];%%00010                        date = moment.tz(dateTimeOffset, _representation.options.dateTimeFormats.timezone);%%00010                    }%%00010%%00010                    return date.format(_representation.options.dateTimeFormats.globalZonedDateTimeFormat);%%00010                };%%00010            case 'string':%%00010                return function (i) {%%00010                    return xAxisData[i];%%00010                };%%00010            case 'number':%%00010                return d3.format(_representation.options.xAxisFormatString);%%00010            default:%%00010                return function (i) {%%00010                    return i;%%00010                };%%00010        }%%00010    };%%00010%%00010    updateTitles = function (updateChart) {%%00010        if (chart) {%%00010            var curTitle = d3.select('#title');%%00010            var curSubtitle = d3.select('#subtitle');%%00010            var chartNeedsUpdating = curTitle.empty() === Boolean(_value.options.title) ||%%00010                curSubtitle.empty() === Boolean(_value.options.subtitle);%%00010            if (_value.options.title) {%%00010                if (curTitle.empty()) {%%00010                    svg.append('text').attr('x', 20).attr('y', 30).attr('id', 'title').attr('class', 'knime-title')%%00010                        .text(_value.options.title);%%00010                } else {%%00010                    curTitle.text(_value.options.title);%%00010                }%%00010            } else {%%00010                curTitle.remove();%%00010            }%%00010            %%00010            if (_value.options.subtitle) {%%00010                if (curSubtitle.empty()) {%%00010                    svg.append('text').attr('x', 20).attr('y', _value.options.title ? 46 : 20).attr('id', 'subtitle')%%00010                        .attr('class', 'knime-subtitle').text(_value.options.subtitle);%%00010                } else {%%00010                    curSubtitle.text(_value.options.subtitle).attr('y', _value.options.title ? 46 : 20);%%00010                }%%00010            } else {%%00010                curSubtitle.remove();%%00010            }%%00010%%00010            if (updateChart &amp;&amp; chartNeedsUpdating) {%%00010                var topMargin = 10;%%00010                topMargin += _value.options.title ? 10 : 0;%%00010                topMargin += _value.options.legend ? 0 : 30;%%00010                topMargin += _value.options.subtitle ? 8 : 0;%%00010                var bottomMargin = 25;%%00010                bottomMargin += (_value.options.title || _value.options.subtitle) ? 0 : 5;%%00010                bottomMargin += _value.options.xAxisLabel ? 20 : 0;%%00010                chart.legend.margin({%%00010                    top: topMargin,%%00010                    bottom: topMargin%%00010                });%%00010                chart.margin({%%00010                    top: topMargin,%%00010                    bottom: bottomMargin%%00010                });%%00010%%00010                if (_representation.options.svg.fullscreen &amp;&amp; _representation.runningInView) {%%00010%%00010                    var isTitle = _value.options.title !== '' || _value.options.subtitle !== '';%%00010                    var height;%%00010                    %%00010                    if (isTitle || !_representation.options.enableViewControls) {%%00010                        knimeService.floatingHeader(true);%%00010                        height = '100%';%%00010                    } else {%%00010                        knimeService.floatingHeader(false);%%00010                        height = 'calc(100% - ' + knimeService.headerHeight() + 'px)';%%00010                    }%%00010%%00010                    layoutContainer.style('height', height)%%00010                    // two rows below force to invalidate the container which solves a weird problem with vertical%%00010                    // scroll bar in IE%%00010                    .style('display', 'none').style('display', 'block');%%00010                    // d3.select(&quot;#svgContainer&quot;).style(&quot;height&quot;, height);%%00010                }%%00010%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010%%00010    updateAxisLabels = function (updateChart) {%%00010        if (chart) {%%00010            var curYAxisLabel = '';%%00010            var curXAxisLabel = '';%%00010            var curYAxisLabelElement = d3.select('.nv-y.nv-axis .nv-axislabel');%%00010            var curXAxisLabelElement = d3.select('.nv-x.nv-axis .nv-axislabel');%%00010            if (!curYAxisLabelElement.empty()) {%%00010                curYAxisLabel = curYAxisLabelElement.text();%%00010            }%%00010            if (!curXAxisLabelElement.empty()) {%%00010                curXAxisLabel = curXAxisLabelElement.text();%%00010            }%%00010            var chartNeedsUpdating = (curYAxisLabel !== _value.options.yAxisLabel) ||%%00010                (curXAxisLabel !== _value.options.xAxisLabel);%%00010%%00010            if (!chartNeedsUpdating) {%%00010                return;%%00010            }%%00010%%00010            chart.xAxis.axisLabel(_value.options.xAxisLabel).axisLabelDistance(0);%%00010%%00010            chart.yAxis.axisLabel(_value.options.yAxisLabel).axisLabelDistance(0);%%00010%%00010            var bottomMargin = 25;%%00010            bottomMargin += _value.options.title || _value.options.subtitle ? 0 : 5;%%00010            bottomMargin += _value.options.xAxisLabel ? 20 : 0;%%00010%%00010            var leftMargin = 60;%%00010            leftMargin += _value.options.yAxisLabel ? 15 : 0;%%00010%%00010            chart.margin({%%00010                left: leftMargin,%%00010                bottom: bottomMargin%%00010            });%%00010%%00010            if (updateChart) {%%00010                chart.update();%%00010            }%%00010        }%%00010    };%%00010    %%00010    // eslint-disable-next-line complexity%%00010    drawControls = function () {%%00010        if (!knimeService) {%%00010            return;%%00010        }%%00010%%00010        if (_representation.options.displayFullscreenButton) {%%00010            knimeService.allowFullscreen();%%00010        }%%00010%%00010        if (!_representation.options.enableViewControls) {%%00010            return;%%00010        }%%00010%%00010        // Title / Subtitle Configuration%%00010        var titleEdit = _representation.options.enableTitleEdit;%%00010        var subtitleEdit = _representation.options.enableSubtitleEdit;%%00010        if (titleEdit) {%%00010            var chartTitleText = knimeService.createMenuTextField('chartTitleText', _value.options.title, function () {%%00010                if (_value.options.title !== this.value) {%%00010                    _value.options.title = this.value;%%00010                    updateTitles(true);%%00010                }%%00010            }, true);%%00010            knimeService.addMenuItem('Chart Title:', 'header', chartTitleText);%%00010        }%%00010        if (subtitleEdit) {%%00010            var chartSubtitleText = knimeService.createMenuTextField('chartSubtitleText', _value.options.subtitle,%%00010                function () {%%00010                    if (_value.options.subtitle !== this.value) {%%00010                        _value.options.subtitle = this.value;%%00010                        updateTitles(true);%%00010                    }%%00010                }, true);%%00010            knimeService.addMenuItem('Chart Subtitle:', 'header', chartSubtitleText, null, knimeService.SMALL_ICON);%%00010        }%%00010%%00010        // x-Axis &amp; y-Axis Labels%%00010        var xAxisEdit = _representation.options.enableXAxisEdit;%%00010        var yAxisEdit = _representation.options.enableYAxisEdit;%%00010        if (xAxisEdit || yAxisEdit) {%%00010            knimeService.addMenuDivider();%%00010%%00010            if (xAxisEdit) {%%00010                var xAxisText = knimeService.createMenuTextField('xAxisText', _value.options.xAxisLabel, function () {%%00010                    if (_value.options.xAxisLabel !== this.value) {%%00010                        _value.options.xAxisLabel = this.value;%%00010                        updateAxisLabels(true);%%00010                    }%%00010                }, true);%%00010                knimeService.addMenuItem('X-axis label:', 'ellipsis-h', xAxisText);%%00010            }%%00010            if (yAxisEdit) {%%00010                var yAxisText = knimeService.createMenuTextField('yAxisText', _value.options.yAxisLabel, function () {%%00010                    if (_value.options.yAxisLabel !== this.value) {%%00010                        _value.options.yAxisLabel = this.value;%%00010                        updateAxisLabels(true);%%00010                    }%%00010                }, true);%%00010                knimeService.addMenuItem('Y-axis label:', 'ellipsis-v', yAxisText);%%00010            }%%00010        }%%00010%%00010        // Chart Type / Interpolation Method / Custom Color%%00010        var chartTypeChange = _representation.options.enableChartTypeChange;%%00010        var interpolationEdit = _representation.options.enableInterpolationMethodEdit;%%00010        if (chartTypeChange || interpolationEdit) {%%00010            knimeService.addMenuDivider();%%00010%%00010            if (chartTypeChange) {%%00010                var chartTypes = Object.keys(stackStyleByType);%%00010                var chartTypeSelector = knimeService.createMenuSelect('chartTypeSelector', _value.options.chartType,%%00010                    chartTypes, function () {%%00010                        _value.options.chartType = this.options[this.selectedIndex].value;%%00010                        drawChart(); // needs a redraw to avoid tooltip problem (AP-7068)%%00010                    });%%00010                knimeService.addMenuItem('Chart Type:', 'area-chart', chartTypeSelector);%%00010            }%%00010%%00010            if (interpolationEdit) {%%00010                var interpolationMethods = ['basis', 'linear', 'step'];%%00010                var interpolationMethodSelector = knimeService.createMenuSelect('interpolationMethodSelector',%%00010                    _value.options.interpolation, interpolationMethods, function () {%%00010                        var changedToBasis = this.options[this.selectedIndex].value === 'basis' &amp;&amp;%%00010                            _value.options.interpolation !== 'basis';%%00010                        _value.options.interpolation = this.options[this.selectedIndex].value;%%00010                        if (changedToBasis &amp;&amp; _value.options.interactiveGuideline) {%%00010                            drawChart();%%00010                        } else {%%00010                            knimeService.clearWarningMessage(TOOLTIP_WARNING);%%00010                            chart.interpolate(_value.options.interpolation);%%00010                            chart.useInteractiveGuideline(_value.options.interpolation === 'basis' ? false%%00010                                : _value.options.interactiveGuideline);%%00010                            chart.update();%%00010                        }%%00010                    });%%00010                // CHECK: Should we use line-chart here?%%00010                knimeService.addMenuItem('Interpolation:', 'bar-chart', interpolationMethodSelector);%%00010            }%%00010        }%%00010%%00010        // Legend, Interactive Guideline, Grid%%00010        var legendToggle = _representation.options.enableLegendToggle;%%00010        var interactiveGuidelineToggle = _representation.options.enableInteractiveGuidelineToggle;%%00010        var showGridToggle = _representation.options.showGridToggle;%%00010        if (legendToggle || interactiveGuidelineToggle || showGridToggle) {%%00010            knimeService.addMenuDivider();%%00010%%00010            if (legendToggle) {%%00010                var legendCheckbox = knimeService.createMenuCheckbox('legendCheckbox', _value.options.legend,%%00010                    function () {%%00010                        _value.options.legend = this.checked;%%00010                        toggleLegend();%%00010                    });%%00010                knimeService.addMenuItem('Legend:', 'info-circle', legendCheckbox);%%00010            }%%00010%%00010            if (interactiveGuidelineToggle) {%%00010                var interactiveGuidelineCheckbox = knimeService.createMenuCheckbox('interactiveGuidelineCheckbox',%%00010                    _value.options.interactiveGuideline, function () {%%00010                        _value.options.interactiveGuideline = this.checked;%%00010                        drawChart();%%00010                    });%%00010%%00010                knimeService.addMenuItem('Tooltip:', 'comment', interactiveGuidelineCheckbox);%%00010            }%%00010%%00010            if (showGridToggle) {%%00010                var gridCheckbox = knimeService.createMenuCheckbox('gridCheckbox', _value.options.showGrid,%%00010                    function () {%%00010                        _value.options.showGrid = this.checked;%%00010                        toggleGrid();%%00010                    });%%00010                knimeService.addMenuItem('Show Grid:', 'th', gridCheckbox);%%00010            }%%00010        }%%00010%%00010        // Filter event checkbox.%%00010        if (knimeService.isInteractivityAvailable()) {%%00010            knimeService.addMenuDivider();%%00010            var subFilIcon = knimeService.createStackedIcon('filter', 'angle-double-right', 'faded right sm',%%00010                'left bold');%%00010%%00010            var subFilCheckbox = knimeService.createMenuCheckbox('filterCheckbox', _value.options.subscribeFilter,%%00010                function () {%%00010                    _value.options.subscribeFilter = this.checked;%%00010                    toggleFilter();%%00010                });%%00010            knimeService.addMenuItem('Subscribe to filter', subFilIcon, subFilCheckbox);%%00010        }%%00010    };%%00010%%00010    setCssClasses = function () {%%00010        // axis%%00010        var axis = d3.selectAll('.nv-axis').classed('knime-axis', true);%%00010        d3.selectAll('.nv-x').classed('knime-x', true);%%00010        d3.selectAll('.nv-y').classed('knime-y', true);%%00010        d3.selectAll('.nv-axislabel').classed('knime-axis-label', true);%%00010        axis.selectAll('path.domain').classed('knime-axis-line', true);%%00010        var axisMaxMin = d3.selectAll('.nv-axisMaxMin').classed('knime-axis-max-min', true);%%00010        axisMaxMin.selectAll('text').classed('knime-tick-label', true);%%00010        var tick = axis.selectAll('.knime-axis .tick').classed('knime-tick', true);%%00010        tick.selectAll('text').classed('knime-tick-label', true);%%00010        tick.selectAll('line').classed('knime-tick-line', true);%%00010%%00010        // legend%%00010        d3.selectAll('.nv-legendWrap').classed('knime-legend', true);%%00010        d3.selectAll('.nv-legend-symbol').classed('knime-legend-symbol', true);%%00010        d3.selectAll('.nv-legend-text').classed('knime-legend-label', true);%%00010    };%%00010%%00010    setTooltipCssClasses = function () {%%00010        // tooltip%%00010        var tooltip = d3.selectAll('.nvtooltip').classed('knime-tooltip', true);%%00010        tooltip.selectAll('.x-value').classed('knime-tooltip-caption', true).classed('knime-x', true);%%00010        tooltip.selectAll('.legend-color-guide').classed('knime-tooltip-color', true);%%00010        tooltip.selectAll('.key').classed('knime-tooltip-key', true);%%00010        tooltip.selectAll('.value').classed('knime-tooltip-value', true);%%00010    };%%00010%%00010    view.validate = function () {%%00010        return true;%%00010    };%%00010%%00010    view.getComponentValue = function () {%%00010        // Save disabled-state of the series from the chart if:%%00010        // - it was saved in _value before%%00010        // - some series are disabled%%00010%%00010        var container = d3.select('#svgContainer');%%00010        var disabled = container.selectAll('g .nv-series').data().map(function (o) {%%00010            return Boolean(o.disabled);%%00010        });%%00010%%00010        if ('disabled' in _value.options || disabled.some(Boolean)) {%%00010            _value.options.disabled = disabled;%%00010        }%%00010%%00010        return _value;%%00010    };%%00010%%00010    view.getSVG = function () {%%00010        // correct faulty rect elements%%00010        d3.selectAll('rect').each(function () {%%00010            var rect = d3.select(this);%%00010            if (!rect.attr('width')) {%%00010                rect.attr('width', 0);%%00010            }%%00010            if (!rect.attr('height')) {%%00010                rect.attr('height', 0);%%00010            }%%00010        });%%00010        var svgElement = d3.select('svg')[0][0];%%00010        knimeService.inlineSvgStyles(svgElement);%%00010        // Return the SVG as a string.%%00010        return (new XMLSerializer()).serializeToString(svgElement);%%00010    };%%00010%%00010    return view;%%00010%%00010})();%%00010"/>
</config>
<config key="cssCode">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="jsDependencies">
<entry key="numSettings" type="xint" value="4"/>
<config key="dependency_0">
<entry key="name" type="xstring" value="nvd3"/>
<entry key="path" type="xstring" value="js-lib/nvd3/1.8.4/nv.d3.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" value="nv"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="D3_3.5.5"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_1">
<entry key="name" type="xstring" value="D3_3.5.5"/>
<entry key="path" type="xstring" value="js-lib/d3/d3.v3_5_5.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_2">
<entry key="name" type="xstring" value="moment"/>
<entry key="path" type="xstring" value="js-lib/moment/2_17/timezone/moment-timezone-with-data.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" value="moment"/>
<config key="dependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="moment_locales_2_17"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
<config key="dependency_3">
<entry key="name" type="xstring" value="moment_locales_2_17"/>
<entry key="path" type="xstring" value="js-lib/moment/2_17/locales/moment-with-locales.min.js"/>
<entry key="usesDefine" type="xboolean" value="false"/>
<entry key="exports" type="xstring" isnull="true" value=""/>
<config key="dependencies">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="local" type="xboolean" value="true"/>
</config>
</config>
<config key="cssDependencies">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="js-lib/nvd3/1.8.4/nv.d3.min.css"/>
</config>
<entry key="new" type="xboolean" value="false"/>
<entry key="inView" type="xboolean" value="true"/>
<config key="tableIds">
<entry key="array-size" type="xint" value="2"/>
<entry key="0" type="xstring" value="acc47575-c110-45f1-9767-867dcb6d2859"/>
<entry key="1" type="xstring" isnull="true" value=""/>
</config>
<config key="variables">
<entry key="numSettings" type="xint" value="1"/>
<entry key="mapClass" type="xstring" value="string"/>
<entry key="key_0" type="xstring" value="knime.workspace"/>
<entry key="class_0" type="xstring" value="java.lang.String"/>
<entry key="value_0" type="xstring" value="C:\Users\milan\OneDrive - University of Reading\UoR Y3\CS3DS19\KNIME-workspace"/>
</config>
<config key="binaryFiles">
<entry key="numSettings" type="xint" value="0"/>
<entry key="mapClass" type="xstring" value="string"/>
</config>
<config key="options">
<entry key="numSettings" type="xint" value="18"/>
<entry key="mapClass" type="xstring" value="object"/>
<entry key="key_0" type="xstring" value="displayFullscreenButton"/>
<entry key="class_0" type="xstring" value="java.lang.Boolean"/>
<entry key="value_0" type="xboolean" value="true"/>
<entry key="key_1" type="xstring" value="xAxisSort"/>
<entry key="class_1" type="xstring" value="java.lang.Boolean"/>
<entry key="value_1" type="xboolean" value="true"/>
<entry key="key_2" type="xstring" value="svg"/>
<entry key="class_2" type="xstring" value="org.knime.dynamic.js.SettingsModelSVGOptions$JSONSVGOptions"/>
<config key="value_2">
<entry key="width" type="xint" value="800"/>
<entry key="height" type="xint" value="600"/>
<entry key="fullscreen" type="xboolean" value="true"/>
</config>
<entry key="key_3" type="xstring" value="columns"/>
<entry key="class_3" type="xstring" value="[Ljava.lang.String;"/>
<config key="value_3">
<entry key="array-size" type="xint" value="1"/>
<entry key="0" type="xstring" value="amount"/>
</config>
<entry key="key_4" type="xstring" value="enableTitleEdit"/>
<entry key="class_4" type="xstring" value="java.lang.Boolean"/>
<entry key="value_4" type="xboolean" value="true"/>
<entry key="key_5" type="xstring" value="xAxisFormatString"/>
<entry key="class_5" type="xstring" value="java.lang.String"/>
<entry key="value_5" type="xstring" value=",.2f"/>
<entry key="key_6" type="xstring" value="enableLegendToggle"/>
<entry key="class_6" type="xstring" value="java.lang.Boolean"/>
<entry key="value_6" type="xboolean" value="true"/>
<entry key="key_7" type="xstring" value="dateTimeFormats"/>
<entry key="class_7" type="xstring" value="org.knime.js.core.components.datetime.SettingsModelDateTimeOptions$JSONDateTimeOptions"/>
<config key="value_7">
<entry key="globalDateTimeLocale" type="xstring" value="en"/>
<entry key="globalDateFormat" type="xstring" value="YYYY-MM-DD"/>
<entry key="globalLocalDateFormat" type="xstring" value="YYYY-MM-DD"/>
<entry key="globalLocalDateTimeFormat" type="xstring" value="YYYY-MM-DD"/>
<entry key="globalLocalTimeFormat" type="xstring" value="HH:mm:ss"/>
<entry key="globalZonedDateTimeFormat" type="xstring" value="YYYY-MM-DD z"/>
<entry key="timezone" type="xstring" value="Europe/Berlin"/>
</config>
<entry key="key_8" type="xstring" value="enableInterpolationMethodEdit"/>
<entry key="class_8" type="xstring" value="java.lang.Boolean"/>
<entry key="value_8" type="xboolean" value="true"/>
<entry key="key_9" type="xstring" value="showGridToggle"/>
<entry key="class_9" type="xstring" value="java.lang.Boolean"/>
<entry key="value_9" type="xboolean" value="true"/>
<entry key="key_10" type="xstring" value="enableChartTypeChange"/>
<entry key="class_10" type="xstring" value="java.lang.Boolean"/>
<entry key="value_10" type="xboolean" value="true"/>
<entry key="key_11" type="xstring" value="enableInteractiveGuidelineToggle"/>
<entry key="class_11" type="xstring" value="java.lang.Boolean"/>
<entry key="value_11" type="xboolean" value="true"/>
<entry key="key_12" type="xstring" value="xAxisColumn"/>
<entry key="class_12" type="xstring" value="java.lang.String"/>
<entry key="value_12" type="xstring" value="date"/>
<entry key="key_13" type="xstring" value="yAxisFormatString"/>
<entry key="class_13" type="xstring" value="java.lang.String"/>
<entry key="value_13" type="xstring" value=",.2f"/>
<entry key="key_14" type="xstring" value="enableXAxisEdit"/>
<entry key="class_14" type="xstring" value="java.lang.Boolean"/>
<entry key="value_14" type="xboolean" value="true"/>
<entry key="key_15" type="xstring" value="enableViewControls"/>
<entry key="class_15" type="xstring" value="java.lang.Boolean"/>
<entry key="value_15" type="xboolean" value="true"/>
<entry key="key_16" type="xstring" value="enableSubtitleEdit"/>
<entry key="class_16" type="xstring" value="java.lang.Boolean"/>
<entry key="value_16" type="xboolean" value="true"/>
<entry key="key_17" type="xstring" value="enableYAxisEdit"/>
<entry key="class_17" type="xstring" value="java.lang.Boolean"/>
<entry key="value_17" type="xboolean" value="true"/>
</config>
<config key="inObjects">
<entry key="numSettings" type="xint" value="2"/>
<config key="inObject_0">
<entry key="knimeDataTableJSON" type="xstring" value="{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTable&quot;,&quot;id&quot;:&quot;acc47575-c110-45f1-9767-867dcb6d2859&quot;,&quot;fragment&quot;:false,&quot;rows&quot;:[{&quot;data&quot;:[&quot;2009-04-10&quot;,160.0],&quot;rowKey&quot;:&quot;Row1&quot;},{&quot;data&quot;:[&quot;2009-04-10&quot;,160.0],&quot;rowKey&quot;:&quot;Row2&quot;},{&quot;data&quot;:[&quot;2009-05-10&quot;,160.0],&quot;rowKey&quot;:&quot;Row3&quot;},{&quot;data&quot;:[&quot;2009-05-20&quot;,1600.0],&quot;rowKey&quot;:&quot;Row4&quot;},{&quot;data&quot;:[&quot;2009-06-08&quot;,1200.0],&quot;rowKey&quot;:&quot;Row5&quot;},{&quot;data&quot;:[&quot;2009-07-04&quot;,70.0],&quot;rowKey&quot;:&quot;Row6&quot;},{&quot;data&quot;:[&quot;2009-07-14&quot;,70.0],&quot;rowKey&quot;:&quot;Row7&quot;},{&quot;data&quot;:[&quot;2009-08-20&quot;,1600.0],&quot;rowKey&quot;:&quot;Row8&quot;},{&quot;data&quot;:[&quot;2009-11-02&quot;,600.0],&quot;rowKey&quot;:&quot;Row9&quot;},{&quot;data&quot;:[&quot;2009-11-22&quot;,600.0],&quot;rowKey&quot;:&quot;Row10&quot;},{&quot;data&quot;:[&quot;2009-12-02&quot;,35.0],&quot;rowKey&quot;:&quot;Row11&quot;},{&quot;data&quot;:[&quot;2009-12-12&quot;,35.0],&quot;rowKey&quot;:&quot;Row12&quot;},{&quot;data&quot;:[&quot;2010-01-03&quot;,1600.0],&quot;rowKey&quot;:&quot;Row13&quot;},{&quot;data&quot;:[&quot;2010-01-10&quot;,35.0],&quot;rowKey&quot;:&quot;Row14&quot;},{&quot;data&quot;:[&quot;2010-01-13&quot;,80.0],&quot;rowKey&quot;:&quot;Row15&quot;},{&quot;data&quot;:[&quot;2010-01-15&quot;,1000.0],&quot;rowKey&quot;:&quot;Row16&quot;},{&quot;data&quot;:[&quot;2010-01-20&quot;,80.0],&quot;rowKey&quot;:&quot;Row17&quot;},{&quot;data&quot;:[&quot;2010-02-12&quot;,240.0],&quot;rowKey&quot;:&quot;Row18&quot;},{&quot;data&quot;:[&quot;2010-02-22&quot;,240.0],&quot;rowKey&quot;:&quot;Row19&quot;},{&quot;data&quot;:[&quot;2010-03-11&quot;,240.0],&quot;rowKey&quot;:&quot;Row20&quot;},{&quot;data&quot;:[&quot;2010-03-12&quot;,80.0],&quot;rowKey&quot;:&quot;Row21&quot;},{&quot;data&quot;:[&quot;2010-03-14&quot;,160.0],&quot;rowKey&quot;:&quot;Row22&quot;},{&quot;data&quot;:[&quot;2010-03-17&quot;,80.0],&quot;rowKey&quot;:&quot;Row23&quot;},{&quot;data&quot;:[&quot;2010-03-31&quot;,200.0],&quot;rowKey&quot;:&quot;Row24&quot;},{&quot;data&quot;:[&quot;2010-04-22&quot;,400.0],&quot;rowKey&quot;:&quot;Row25&quot;},{&quot;data&quot;:[&quot;2010-05-12&quot;,160.0],&quot;rowKey&quot;:&quot;Row26&quot;},{&quot;data&quot;:[&quot;2010-05-17&quot;,175.0],&quot;rowKey&quot;:&quot;Row27&quot;},{&quot;data&quot;:[&quot;2010-06-22&quot;,240.0],&quot;rowKey&quot;:&quot;Row28&quot;},{&quot;data&quot;:[&quot;2010-06-28&quot;,350.0],&quot;rowKey&quot;:&quot;Row29&quot;},{&quot;data&quot;:[&quot;2010-07-07&quot;,480.0],&quot;rowKey&quot;:&quot;Row30&quot;},{&quot;data&quot;:[&quot;2010-07-17&quot;,175.0],&quot;rowKey&quot;:&quot;Row31&quot;},{&quot;data&quot;:[&quot;2010-08-28&quot;,350.0],&quot;rowKey&quot;:&quot;Row32&quot;},{&quot;data&quot;:[&quot;2010-08-31&quot;,200.0],&quot;rowKey&quot;:&quot;Row33&quot;},{&quot;data&quot;:[&quot;2010-09-14&quot;,160.0],&quot;rowKey&quot;:&quot;Row34&quot;},{&quot;data&quot;:[&quot;2010-10-01&quot;,70.0],&quot;rowKey&quot;:&quot;Row35&quot;},{&quot;data&quot;:[&quot;2010-10-11&quot;,70.0],&quot;rowKey&quot;:&quot;Row36&quot;},{&quot;data&quot;:[&quot;2010-12-07&quot;,600.0],&quot;rowKey&quot;:&quot;Row37&quot;},{&quot;data&quot;:[&quot;2011-01-02&quot;,640.0],&quot;rowKey&quot;:&quot;Row38&quot;},{&quot;data&quot;:[&quot;2011-01-10&quot;,350.0],&quot;rowKey&quot;:&quot;Row39&quot;},{&quot;data&quot;:[&quot;2011-02-01&quot;,40.0],&quot;rowKey&quot;:&quot;Row40&quot;},{&quot;data&quot;:[&quot;2011-02-02&quot;,640.0],&quot;rowKey&quot;:&quot;Row41&quot;},{&quot;data&quot;:[&quot;2011-02-11&quot;,40.0],&quot;rowKey&quot;:&quot;Row42&quot;},{&quot;data&quot;:[&quot;2011-03-06&quot;,350.0],&quot;rowKey&quot;:&quot;Row43&quot;},{&quot;data&quot;:[&quot;2011-03-18&quot;,35.0],&quot;rowKey&quot;:&quot;Row44&quot;},{&quot;data&quot;:[&quot;2011-03-20&quot;,385.0],&quot;rowKey&quot;:&quot;Row45&quot;},{&quot;data&quot;:[&quot;2011-04-06&quot;,35.0],&quot;rowKey&quot;:&quot;Row46&quot;}],&quot;filtered&quot;:false,&quot;spec&quot;:{&quot;@class&quot;:&quot;org.knime.js.core.JSONDataTableSpec&quot;,&quot;numRows&quot;:46,&quot;colNames&quot;:[&quot;date&quot;,&quot;amount&quot;],&quot;numColumns&quot;:2,&quot;containsMissingValues&quot;:[false,false],&quot;colTypes&quot;:[&quot;string&quot;,&quot;number&quot;],&quot;colorModels&quot;:[],&quot;knimeTypes&quot;:[&quot;String&quot;,&quot;Number (integer)&quot;],&quot;filterIds&quot;:[null,null],&quot;possibleValues&quot;:[[&quot;2009-04-10&quot;,&quot;2009-05-10&quot;,&quot;2009-05-20&quot;,&quot;2009-06-08&quot;,&quot;2009-07-04&quot;,&quot;2009-07-14&quot;,&quot;2009-08-20&quot;,&quot;2009-11-02&quot;,&quot;2009-11-22&quot;,&quot;2009-12-02&quot;,&quot;2009-12-12&quot;,&quot;2010-01-03&quot;,&quot;2010-01-10&quot;,&quot;2010-01-13&quot;,&quot;2010-01-15&quot;,&quot;2010-01-20&quot;,&quot;2010-02-12&quot;,&quot;2010-02-22&quot;,&quot;2010-03-11&quot;,&quot;2010-03-12&quot;,&quot;2010-03-14&quot;,&quot;2010-03-17&quot;,&quot;2010-03-31&quot;,&quot;2010-04-22&quot;,&quot;2010-05-12&quot;,&quot;2010-05-17&quot;,&quot;2010-06-22&quot;,&quot;2010-06-28&quot;,&quot;2010-07-07&quot;,&quot;2010-07-17&quot;,&quot;2010-08-28&quot;,&quot;2010-08-31&quot;,&quot;2010-09-14&quot;,&quot;2010-10-01&quot;,&quot;2010-10-11&quot;,&quot;2010-12-07&quot;,&quot;2011-01-02&quot;,&quot;2011-01-10&quot;,&quot;2011-02-01&quot;,&quot;2011-02-02&quot;,&quot;2011-02-11&quot;,&quot;2011-03-06&quot;,&quot;2011-03-18&quot;,&quot;2011-03-20&quot;,&quot;2011-04-06&quot;],null],&quot;rowColorValues&quot;:[&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;,&quot;#404040&quot;],&quot;extensionTypes&quot;:[],&quot;extensionNames&quot;:[],&quot;maxValues&quot;:[&quot;2011-04-06&quot;,1600.0],&quot;hiddenColumns&quot;:[],&quot;rowSizeValues&quot;:null,&quot;minValues&quot;:[&quot;2009-04-10&quot;,35.0],&quot;numExtensions&quot;:0},&quot;dataHash&quot;:null,&quot;totalFilteredRows&quot;:0,&quot;fragmentFirstRowIndex&quot;:0,&quot;totalRows&quot;:0}"/>
</config>
<config key="inObject_1">
<entry key="jsonValue" type="xstring" isnull="true" value=""/>
</config>
</config>
<entry key="warnMessage" type="xstring" value=""/>
<entry key="errorMessage" type="xstring" value=""/>
</config>
